// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Ziggeo
import AVFoundation
import Accelerate
import Foundation
import Swift
import UIKit
@_exported import Ziggeo
import _Concurrency
@objc final public class Chronometer : ObjectiveC.NSObject {
  final public var isPlaying: Swift.Bool
  final public var timerCurrentValue: Swift.Double
  final public var timerDidUpdate: ((Foundation.TimeInterval) -> ())?
  final public var timerDidComplete: (() -> ())?
  @objc public init(withTimeInterval timeInterval: Foundation.TimeInterval = 0.0)
  @objc final public func start(shouldFire fire: Swift.Bool = true)
  @objc final public func pause()
  @objc final public func stop()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AudioContext {
  final public let audioURL: Foundation.URL
  final public let totalSamples: Swift.Int
  final public let asset: AVFoundation.AVAsset
  final public let assetTrack: AVFoundation.AVAssetTrack
  public static func load(fromAudioURL audioURL: Foundation.URL, completionHandler: @escaping (_ audioContext: Ziggeo.AudioContext?) -> ())
  final public func render(targetSamples: Swift.Int = 100) -> [Swift.Float]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseNibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func awakeFromNib()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class AudioVisualizationView : Ziggeo.BaseNibView {
  @objc public enum AudioVisualizationMode : Swift.Int {
    case read = 0
    case write = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarInterItem: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarSingleStick: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) public var audioVisualizationMode: Ziggeo.AudioVisualizationView.AudioVisualizationMode
  @_Concurrency.MainActor(unsafe) public var audioVisualizationTimeInterval: Swift.Double
  @_Concurrency.MainActor(unsafe) public var currentGradientPercentage: Swift.Float?
  @objc @_Concurrency.MainActor(unsafe) public var meteringLevels: [Swift.Float]? {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientStartColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientEndColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func reset()
  @objc @_Concurrency.MainActor(unsafe) public func add(meteringLevel: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public func scaleSoundDataToFitScreen() -> [Swift.Float]
  @objc @_Concurrency.MainActor(unsafe) public func play(from url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func play(for duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) public func pause()
  @objc @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ViewModel : ObjectiveC.NSObject {
  @objc public var audioFilePathLocal: Foundation.URL?
  @objc public var meteringLevels: [Swift.Float]?
  @objc public var audioMeteringLevelUpdate: ((Swift.Float) -> ())?
  @objc public var audioDidFinish: (() -> ())?
  @objc override dynamic public init()
  @objc public func askAudioRecordingPermission(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func startRecording(completion: @escaping (Foundation.URL?, [Swift.Float]?, Swift.Error?) -> Swift.Void)
  @objc public func stopRecording() throws
  @objc public func resetRecording() throws
  @objc public func startPlaying() -> Swift.Double
  @objc public func setCurrentTime(_ currentTime: Foundation.TimeInterval)
  @objc public func pausePlaying() throws
  @objc deinit
}
